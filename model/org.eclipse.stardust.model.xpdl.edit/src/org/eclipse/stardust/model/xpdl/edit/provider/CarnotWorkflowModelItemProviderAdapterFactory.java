/*******************************************************************************
 * Copyright (c) 2011 SunGard CSA LLC and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    SunGard CSA LLC - initial API and implementation and/or initial documentation
 *******************************************************************************/
package org.eclipse.stardust.model.xpdl.edit.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.*;
import org.eclipse.stardust.model.xpdl.carnot.util.CarnotWorkflowModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CarnotWorkflowModelItemProviderAdapterFactory extends CarnotWorkflowModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public static final String copyright = "Copyright 2000-2009 by SunGard Systeme GmbH"; //$NON-NLS-1$

   /**
    * This keeps track of the root adapter factory that delegates to this adapter factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ComposedAdapterFactory parentAdapterFactory;

   /**
    * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IChangeNotifier changeNotifier = new ChangeNotifier();

   /**
    * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Collection<Object> supportedTypes = new ArrayList<Object>();

   /**
    * This constructs an instance.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public CarnotWorkflowModelItemProviderAdapterFactory()
   {
      supportedTypes.add(IEditingDomainItemProvider.class);
      supportedTypes.add(IStructuredItemContentProvider.class);
      supportedTypes.add(ITreeItemContentProvider.class);
      supportedTypes.add(IItemLabelProvider.class);
      supportedTypes.add(IItemPropertySource.class);
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.Coordinates} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected CoordinatesItemProvider coordinatesItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.Coordinates}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createCoordinatesAdapter()
   {
      if (coordinatesItemProvider == null)
      {
         coordinatesItemProvider = new CoordinatesItemProvider(this);
      }

      return coordinatesItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.IExtensibleElement} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IExtensibleElementItemProvider iExtensibleElementItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.IExtensibleElement}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createIExtensibleElementAdapter()
   {
      if (iExtensibleElementItemProvider == null)
      {
         iExtensibleElementItemProvider = new IExtensibleElementItemProvider(this);
      }

      return iExtensibleElementItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.IdentifiableReference} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IdentifiableReferenceItemProvider identifiableReferenceItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.IdentifiableReference}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createIdentifiableReferenceAdapter()
   {
      if (identifiableReferenceItemProvider == null)
      {
         identifiableReferenceItemProvider = new IdentifiableReferenceItemProvider(this);
      }

      return identifiableReferenceItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.AccessPointType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AccessPointTypeItemProvider accessPointTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.AccessPointType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAccessPointTypeAdapter()
   {
      if (accessPointTypeItemProvider == null)
      {
         accessPointTypeItemProvider = new AccessPointTypeItemProvider(this);
      }

      return accessPointTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ActivitySymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ActivitySymbolTypeItemProvider activitySymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ActivitySymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createActivitySymbolTypeAdapter()
   {
      if (activitySymbolTypeItemProvider == null)
      {
         activitySymbolTypeItemProvider = new ActivitySymbolTypeItemProvider(this);
      }

      return activitySymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ActivityType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ActivityTypeItemProvider activityTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ActivityType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createActivityTypeAdapter()
   {
      if (activityTypeItemProvider == null)
      {
         activityTypeItemProvider = new ActivityTypeItemProvider(this);
      }

      return activityTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.AnnotationSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AnnotationSymbolTypeItemProvider annotationSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.AnnotationSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAnnotationSymbolTypeAdapter()
   {
      if (annotationSymbolTypeItemProvider == null)
      {
         annotationSymbolTypeItemProvider = new AnnotationSymbolTypeItemProvider(this);
      }

      return annotationSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ApplicationContextTypeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ApplicationContextTypeTypeItemProvider applicationContextTypeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ApplicationContextTypeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createApplicationContextTypeTypeAdapter()
   {
      if (applicationContextTypeTypeItemProvider == null)
      {
         applicationContextTypeTypeItemProvider = new ApplicationContextTypeTypeItemProvider(this);
      }

      return applicationContextTypeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ApplicationSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ApplicationSymbolTypeItemProvider applicationSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ApplicationSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createApplicationSymbolTypeAdapter()
   {
      if (applicationSymbolTypeItemProvider == null)
      {
         applicationSymbolTypeItemProvider = new ApplicationSymbolTypeItemProvider(this);
      }

      return applicationSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ApplicationType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ApplicationTypeItemProvider applicationTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ApplicationType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createApplicationTypeAdapter()
   {
      if (applicationTypeItemProvider == null)
      {
         applicationTypeItemProvider = new ApplicationTypeItemProvider(this);
      }

      return applicationTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ApplicationTypeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ApplicationTypeTypeItemProvider applicationTypeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ApplicationTypeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createApplicationTypeTypeAdapter()
   {
      if (applicationTypeTypeItemProvider == null)
      {
         applicationTypeTypeItemProvider = new ApplicationTypeTypeItemProvider(this);
      }

      return applicationTypeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.AttributeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AttributeTypeItemProvider attributeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.AttributeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAttributeTypeAdapter()
   {
      if (attributeTypeItemProvider == null)
      {
         attributeTypeItemProvider = new AttributeTypeItemProvider(this);
      }

      return attributeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.BindActionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BindActionTypeItemProvider bindActionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.BindActionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBindActionTypeAdapter()
   {
      if (bindActionTypeItemProvider == null)
      {
         bindActionTypeItemProvider = new BindActionTypeItemProvider(this);
      }

      return bindActionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ConditionalPerformerSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ConditionalPerformerSymbolTypeItemProvider conditionalPerformerSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ConditionalPerformerSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createConditionalPerformerSymbolTypeAdapter()
   {
      if (conditionalPerformerSymbolTypeItemProvider == null)
      {
         conditionalPerformerSymbolTypeItemProvider = new ConditionalPerformerSymbolTypeItemProvider(this);
      }

      return conditionalPerformerSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ConditionalPerformerType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ConditionalPerformerTypeItemProvider conditionalPerformerTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ConditionalPerformerType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createConditionalPerformerTypeAdapter()
   {
      if (conditionalPerformerTypeItemProvider == null)
      {
         conditionalPerformerTypeItemProvider = new ConditionalPerformerTypeItemProvider(this);
      }

      return conditionalPerformerTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ContextType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ContextTypeItemProvider contextTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ContextType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createContextTypeAdapter()
   {
      if (contextTypeItemProvider == null)
      {
         contextTypeItemProvider = new ContextTypeItemProvider(this);
      }

      return contextTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DataMappingConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DataMappingConnectionTypeItemProvider dataMappingConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DataMappingConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDataMappingConnectionTypeAdapter()
   {
      if (dataMappingConnectionTypeItemProvider == null)
      {
         dataMappingConnectionTypeItemProvider = new DataMappingConnectionTypeItemProvider(this);
      }

      return dataMappingConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DataMappingType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DataMappingTypeItemProvider dataMappingTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DataMappingType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDataMappingTypeAdapter()
   {
      if (dataMappingTypeItemProvider == null)
      {
         dataMappingTypeItemProvider = new DataMappingTypeItemProvider(this);
      }

      return dataMappingTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DataPathType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DataPathTypeItemProvider dataPathTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DataPathType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDataPathTypeAdapter()
   {
      if (dataPathTypeItemProvider == null)
      {
         dataPathTypeItemProvider = new DataPathTypeItemProvider(this);
      }

      return dataPathTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DataSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DataSymbolTypeItemProvider dataSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DataSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDataSymbolTypeAdapter()
   {
      if (dataSymbolTypeItemProvider == null)
      {
         dataSymbolTypeItemProvider = new DataSymbolTypeItemProvider(this);
      }

      return dataSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DataType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DataTypeItemProvider dataTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DataType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDataTypeAdapter()
   {
      if (dataTypeItemProvider == null)
      {
         dataTypeItemProvider = new DataTypeItemProvider(this);
      }

      return dataTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DataTypeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DataTypeTypeItemProvider dataTypeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DataTypeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDataTypeTypeAdapter()
   {
      if (dataTypeTypeItemProvider == null)
      {
         dataTypeTypeItemProvider = new DataTypeTypeItemProvider(this);
      }

      return dataTypeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DescriptionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DescriptionTypeItemProvider descriptionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DescriptionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDescriptionTypeAdapter()
   {
      if (descriptionTypeItemProvider == null)
      {
         descriptionTypeItemProvider = new DescriptionTypeItemProvider(this);
      }

      return descriptionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DiagramType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DiagramTypeItemProvider diagramTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DiagramType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDiagramTypeAdapter()
   {
      if (diagramTypeItemProvider == null)
      {
         diagramTypeItemProvider = new DiagramTypeItemProvider(this);
      }

      return diagramTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.DocumentRoot} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DocumentRootItemProvider documentRootItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.DocumentRoot}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDocumentRootAdapter()
   {
      if (documentRootItemProvider == null)
      {
         documentRootItemProvider = new DocumentRootItemProvider(this);
      }

      return documentRootItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.EndEventSymbol} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected EndEventSymbolItemProvider endEventSymbolItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.EndEventSymbol}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createEndEventSymbolAdapter()
   {
      if (endEventSymbolItemProvider == null)
      {
         endEventSymbolItemProvider = new EndEventSymbolItemProvider(this);
      }

      return endEventSymbolItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.EventActionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected EventActionTypeItemProvider eventActionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.EventActionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createEventActionTypeAdapter()
   {
      if (eventActionTypeItemProvider == null)
      {
         eventActionTypeItemProvider = new EventActionTypeItemProvider(this);
      }

      return eventActionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.EventActionTypeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected EventActionTypeTypeItemProvider eventActionTypeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.EventActionTypeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createEventActionTypeTypeAdapter()
   {
      if (eventActionTypeTypeItemProvider == null)
      {
         eventActionTypeTypeItemProvider = new EventActionTypeTypeItemProvider(this);
      }

      return eventActionTypeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.EventConditionTypeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected EventConditionTypeTypeItemProvider eventConditionTypeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.EventConditionTypeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createEventConditionTypeTypeAdapter()
   {
      if (eventConditionTypeTypeItemProvider == null)
      {
         eventConditionTypeTypeItemProvider = new EventConditionTypeTypeItemProvider(this);
      }

      return eventConditionTypeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.EventHandlerType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected EventHandlerTypeItemProvider eventHandlerTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.EventHandlerType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createEventHandlerTypeAdapter()
   {
      if (eventHandlerTypeItemProvider == null)
      {
         eventHandlerTypeItemProvider = new EventHandlerTypeItemProvider(this);
      }

      return eventHandlerTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ExecutedByConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ExecutedByConnectionTypeItemProvider executedByConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ExecutedByConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createExecutedByConnectionTypeAdapter()
   {
      if (executedByConnectionTypeItemProvider == null)
      {
         executedByConnectionTypeItemProvider = new ExecutedByConnectionTypeItemProvider(this);
      }

      return executedByConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.IdRef} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IdRefItemProvider idRefItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.IdRef}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createIdRefAdapter()
   {
      if (idRefItemProvider == null)
      {
         idRefItemProvider = new IdRefItemProvider(this);
      }

      return idRefItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.GatewaySymbol} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected GatewaySymbolItemProvider gatewaySymbolItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.GatewaySymbol}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createGatewaySymbolAdapter()
   {
      if (gatewaySymbolItemProvider == null)
      {
         gatewaySymbolItemProvider = new GatewaySymbolItemProvider(this);
      }

      return gatewaySymbolItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.GenericLinkConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected GenericLinkConnectionTypeItemProvider genericLinkConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.GenericLinkConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createGenericLinkConnectionTypeAdapter()
   {
      if (genericLinkConnectionTypeItemProvider == null)
      {
         genericLinkConnectionTypeItemProvider = new GenericLinkConnectionTypeItemProvider(this);
      }

      return genericLinkConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.GroupSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected GroupSymbolTypeItemProvider groupSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.GroupSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createGroupSymbolTypeAdapter()
   {
      if (groupSymbolTypeItemProvider == null)
      {
         groupSymbolTypeItemProvider = new GroupSymbolTypeItemProvider(this);
      }

      return groupSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.IntermediateEventSymbol} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IntermediateEventSymbolItemProvider intermediateEventSymbolItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.IntermediateEventSymbol}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createIntermediateEventSymbolAdapter()
   {
      if (intermediateEventSymbolItemProvider == null)
      {
         intermediateEventSymbolItemProvider = new IntermediateEventSymbolItemProvider(this);
      }

      return intermediateEventSymbolItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.LaneSymbol} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected LaneSymbolItemProvider laneSymbolItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.LaneSymbol}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createLaneSymbolAdapter()
   {
      if (laneSymbolItemProvider == null)
      {
         laneSymbolItemProvider = new LaneSymbolItemProvider(this);
      }

      return laneSymbolItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.LinkTypeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected LinkTypeTypeItemProvider linkTypeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.LinkTypeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createLinkTypeTypeAdapter()
   {
      if (linkTypeTypeItemProvider == null)
      {
         linkTypeTypeItemProvider = new LinkTypeTypeItemProvider(this);
      }

      return linkTypeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ModelerSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ModelerSymbolTypeItemProvider modelerSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ModelerSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createModelerSymbolTypeAdapter()
   {
      if (modelerSymbolTypeItemProvider == null)
      {
         modelerSymbolTypeItemProvider = new ModelerSymbolTypeItemProvider(this);
      }

      return modelerSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ModelerType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ModelerTypeItemProvider modelerTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ModelerType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createModelerTypeAdapter()
   {
      if (modelerTypeItemProvider == null)
      {
         modelerTypeItemProvider = new ModelerTypeItemProvider(this);
      }

      return modelerTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ModelType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ModelTypeItemProvider modelTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ModelType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createModelTypeAdapter()
   {
      if (modelTypeItemProvider == null)
      {
         modelTypeItemProvider = new ModelTypeItemProvider(this);
      }

      return modelTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.OrganizationSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected OrganizationSymbolTypeItemProvider organizationSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.OrganizationSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createOrganizationSymbolTypeAdapter()
   {
      if (organizationSymbolTypeItemProvider == null)
      {
         organizationSymbolTypeItemProvider = new OrganizationSymbolTypeItemProvider(this);
      }

      return organizationSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.OrganizationType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected OrganizationTypeItemProvider organizationTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.OrganizationType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createOrganizationTypeAdapter()
   {
      if (organizationTypeItemProvider == null)
      {
         organizationTypeItemProvider = new OrganizationTypeItemProvider(this);
      }

      return organizationTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ParameterMappingType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ParameterMappingTypeItemProvider parameterMappingTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ParameterMappingType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createParameterMappingTypeAdapter()
   {
      if (parameterMappingTypeItemProvider == null)
      {
         parameterMappingTypeItemProvider = new ParameterMappingTypeItemProvider(this);
      }

      return parameterMappingTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ParticipantType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ParticipantTypeItemProvider participantTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ParticipantType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createParticipantTypeAdapter()
   {
      if (participantTypeItemProvider == null)
      {
         participantTypeItemProvider = new ParticipantTypeItemProvider(this);
      }

      return participantTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.PartOfConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected PartOfConnectionTypeItemProvider partOfConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.PartOfConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createPartOfConnectionTypeAdapter()
   {
      if (partOfConnectionTypeItemProvider == null)
      {
         partOfConnectionTypeItemProvider = new PartOfConnectionTypeItemProvider(this);
      }

      return partOfConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.PerformsConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected PerformsConnectionTypeItemProvider performsConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.PerformsConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createPerformsConnectionTypeAdapter()
   {
      if (performsConnectionTypeItemProvider == null)
      {
         performsConnectionTypeItemProvider = new PerformsConnectionTypeItemProvider(this);
      }

      return performsConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.PoolSymbol} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected PoolSymbolItemProvider poolSymbolItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.PoolSymbol}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createPoolSymbolAdapter()
   {
      if (poolSymbolItemProvider == null)
      {
         poolSymbolItemProvider = new PoolSymbolItemProvider(this);
      }

      return poolSymbolItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ProcessDefinitionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ProcessDefinitionTypeItemProvider processDefinitionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ProcessDefinitionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createProcessDefinitionTypeAdapter()
   {
      if (processDefinitionTypeItemProvider == null)
      {
         processDefinitionTypeItemProvider = new ProcessDefinitionTypeItemProvider(this);
      }

      return processDefinitionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ProcessSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ProcessSymbolTypeItemProvider processSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ProcessSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createProcessSymbolTypeAdapter()
   {
      if (processSymbolTypeItemProvider == null)
      {
         processSymbolTypeItemProvider = new ProcessSymbolTypeItemProvider(this);
      }

      return processSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.PublicInterfaceSymbol} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected PublicInterfaceSymbolItemProvider publicInterfaceSymbolItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.PublicInterfaceSymbol}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createPublicInterfaceSymbolAdapter()
   {
      if (publicInterfaceSymbolItemProvider == null)
      {
         publicInterfaceSymbolItemProvider = new PublicInterfaceSymbolItemProvider(this);
      }

      return publicInterfaceSymbolItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.RefersToConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected RefersToConnectionTypeItemProvider refersToConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.RefersToConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createRefersToConnectionTypeAdapter()
   {
      if (refersToConnectionTypeItemProvider == null)
      {
         refersToConnectionTypeItemProvider = new RefersToConnectionTypeItemProvider(this);
      }

      return refersToConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.RoleSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected RoleSymbolTypeItemProvider roleSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.RoleSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createRoleSymbolTypeAdapter()
   {
      if (roleSymbolTypeItemProvider == null)
      {
         roleSymbolTypeItemProvider = new RoleSymbolTypeItemProvider(this);
      }

      return roleSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.RoleType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected RoleTypeItemProvider roleTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.RoleType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createRoleTypeAdapter()
   {
      if (roleTypeItemProvider == null)
      {
         roleTypeItemProvider = new RoleTypeItemProvider(this);
      }

      return roleTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.StartEventSymbol} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected StartEventSymbolItemProvider startEventSymbolItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.StartEventSymbol}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createStartEventSymbolAdapter()
   {
      if (startEventSymbolItemProvider == null)
      {
         startEventSymbolItemProvider = new StartEventSymbolItemProvider(this);
      }

      return startEventSymbolItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.SubProcessOfConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected SubProcessOfConnectionTypeItemProvider subProcessOfConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.SubProcessOfConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createSubProcessOfConnectionTypeAdapter()
   {
      if (subProcessOfConnectionTypeItemProvider == null)
      {
         subProcessOfConnectionTypeItemProvider = new SubProcessOfConnectionTypeItemProvider(this);
      }

      return subProcessOfConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TeamLeadConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TeamLeadConnectionTypeItemProvider teamLeadConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TeamLeadConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTeamLeadConnectionTypeAdapter()
   {
      if (teamLeadConnectionTypeItemProvider == null)
      {
         teamLeadConnectionTypeItemProvider = new TeamLeadConnectionTypeItemProvider(this);
      }

      return teamLeadConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TextSymbolType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TextSymbolTypeItemProvider textSymbolTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TextSymbolType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTextSymbolTypeAdapter()
   {
      if (textSymbolTypeItemProvider == null)
      {
         textSymbolTypeItemProvider = new TextSymbolTypeItemProvider(this);
      }

      return textSymbolTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TextType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TextTypeItemProvider textTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TextType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTextTypeAdapter()
   {
      if (textTypeItemProvider == null)
      {
         textTypeItemProvider = new TextTypeItemProvider(this);
      }

      return textTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TransitionConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TransitionConnectionTypeItemProvider transitionConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TransitionConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTransitionConnectionTypeAdapter()
   {
      if (transitionConnectionTypeItemProvider == null)
      {
         transitionConnectionTypeItemProvider = new TransitionConnectionTypeItemProvider(this);
      }

      return transitionConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TransitionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TransitionTypeItemProvider transitionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TransitionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTransitionTypeAdapter()
   {
      if (transitionTypeItemProvider == null)
      {
         transitionTypeItemProvider = new TransitionTypeItemProvider(this);
      }

      return transitionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TriggersConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TriggersConnectionTypeItemProvider triggersConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TriggersConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTriggersConnectionTypeAdapter()
   {
      if (triggersConnectionTypeItemProvider == null)
      {
         triggersConnectionTypeItemProvider = new TriggersConnectionTypeItemProvider(this);
      }

      return triggersConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TriggerType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TriggerTypeItemProvider triggerTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TriggerType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTriggerTypeAdapter()
   {
      if (triggerTypeItemProvider == null)
      {
         triggerTypeItemProvider = new TriggerTypeItemProvider(this);
      }

      return triggerTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.TriggerTypeType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected TriggerTypeTypeItemProvider triggerTypeTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.TriggerTypeType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createTriggerTypeTypeAdapter()
   {
      if (triggerTypeTypeItemProvider == null)
      {
         triggerTypeTypeItemProvider = new TriggerTypeTypeItemProvider(this);
      }

      return triggerTypeTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.UnbindActionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected UnbindActionTypeItemProvider unbindActionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.UnbindActionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createUnbindActionTypeAdapter()
   {
      if (unbindActionTypeItemProvider == null)
      {
         unbindActionTypeItemProvider = new UnbindActionTypeItemProvider(this);
      }

      return unbindActionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ViewableType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ViewableTypeItemProvider viewableTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ViewableType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createViewableTypeAdapter()
   {
      if (viewableTypeItemProvider == null)
      {
         viewableTypeItemProvider = new ViewableTypeItemProvider(this);
      }

      return viewableTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.ViewType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ViewTypeItemProvider viewTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.ViewType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createViewTypeAdapter()
   {
      if (viewTypeItemProvider == null)
      {
         viewTypeItemProvider = new ViewTypeItemProvider(this);
      }

      return viewTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.WorksForConnectionType} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected WorksForConnectionTypeItemProvider worksForConnectionTypeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.WorksForConnectionType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createWorksForConnectionTypeAdapter()
   {
      if (worksForConnectionTypeItemProvider == null)
      {
         worksForConnectionTypeItemProvider = new WorksForConnectionTypeItemProvider(this);
      }

      return worksForConnectionTypeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.eclipse.stardust.model.xpdl.edit.XmlTextNode} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected XmlTextNodeItemProvider xmlTextNodeItemProvider;

   /**
    * This creates an adapter for a {@link org.eclipse.stardust.model.xpdl.edit.XmlTextNode}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createXmlTextNodeAdapter()
   {
      if (xmlTextNodeItemProvider == null)
      {
         xmlTextNodeItemProvider = new XmlTextNodeItemProvider(this);
      }

      return xmlTextNodeItemProvider;
   }

   /**
    * This returns the root adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public ComposeableAdapterFactory getRootAdapterFactory()
   {
      return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
   }

   /**
    * This sets the composed adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
   {
      this.parentAdapterFactory = parentAdapterFactory;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public boolean isFactoryForType(Object type)
   {
      return supportedTypes.contains(type) || super.isFactoryForType(type);
   }

   /**
    * This implementation substitutes the factory itself as the key for the adapter.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter adapt(Notifier notifier, Object type)
   {
      return super.adapt(notifier, this);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Object adapt(Object object, Object type)
   {
      if (isFactoryForType(type))
      {
         Object adapter = super.adapt(object, type);
         if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
         {
            return adapter;
         }
      }

      return null;
   }

   /**
    * This adds a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void addListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.addListener(notifyChangedListener);
   }

   /**
    * This removes a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void removeListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.removeListener(notifyChangedListener);
   }

   /**
    * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void fireNotifyChanged(Notification notification)
   {
      changeNotifier.fireNotifyChanged(notification);

      if (parentAdapterFactory != null)
      {
         parentAdapterFactory.fireNotifyChanged(notification);
      }
   }

   /**
    * This disposes all of the item providers created by this factory. 
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void dispose()
   {
      if (coordinatesItemProvider != null) coordinatesItemProvider.dispose();
      if (iExtensibleElementItemProvider != null) iExtensibleElementItemProvider.dispose();
      if (identifiableReferenceItemProvider != null) identifiableReferenceItemProvider.dispose();
      if (accessPointTypeItemProvider != null) accessPointTypeItemProvider.dispose();
      if (activitySymbolTypeItemProvider != null) activitySymbolTypeItemProvider.dispose();
      if (activityTypeItemProvider != null) activityTypeItemProvider.dispose();
      if (annotationSymbolTypeItemProvider != null) annotationSymbolTypeItemProvider.dispose();
      if (applicationContextTypeTypeItemProvider != null) applicationContextTypeTypeItemProvider.dispose();
      if (applicationSymbolTypeItemProvider != null) applicationSymbolTypeItemProvider.dispose();
      if (applicationTypeItemProvider != null) applicationTypeItemProvider.dispose();
      if (applicationTypeTypeItemProvider != null) applicationTypeTypeItemProvider.dispose();
      if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
      if (bindActionTypeItemProvider != null) bindActionTypeItemProvider.dispose();
      if (conditionalPerformerSymbolTypeItemProvider != null) conditionalPerformerSymbolTypeItemProvider.dispose();
      if (conditionalPerformerTypeItemProvider != null) conditionalPerformerTypeItemProvider.dispose();
      if (contextTypeItemProvider != null) contextTypeItemProvider.dispose();
      if (dataMappingConnectionTypeItemProvider != null) dataMappingConnectionTypeItemProvider.dispose();
      if (dataMappingTypeItemProvider != null) dataMappingTypeItemProvider.dispose();
      if (dataPathTypeItemProvider != null) dataPathTypeItemProvider.dispose();
      if (dataSymbolTypeItemProvider != null) dataSymbolTypeItemProvider.dispose();
      if (dataTypeItemProvider != null) dataTypeItemProvider.dispose();
      if (dataTypeTypeItemProvider != null) dataTypeTypeItemProvider.dispose();
      if (descriptionTypeItemProvider != null) descriptionTypeItemProvider.dispose();
      if (diagramTypeItemProvider != null) diagramTypeItemProvider.dispose();
      if (documentRootItemProvider != null) documentRootItemProvider.dispose();
      if (endEventSymbolItemProvider != null) endEventSymbolItemProvider.dispose();
      if (eventActionTypeItemProvider != null) eventActionTypeItemProvider.dispose();
      if (eventActionTypeTypeItemProvider != null) eventActionTypeTypeItemProvider.dispose();
      if (eventConditionTypeTypeItemProvider != null) eventConditionTypeTypeItemProvider.dispose();
      if (eventHandlerTypeItemProvider != null) eventHandlerTypeItemProvider.dispose();
      if (executedByConnectionTypeItemProvider != null) executedByConnectionTypeItemProvider.dispose();
      if (idRefItemProvider != null) idRefItemProvider.dispose();
      if (gatewaySymbolItemProvider != null) gatewaySymbolItemProvider.dispose();
      if (genericLinkConnectionTypeItemProvider != null) genericLinkConnectionTypeItemProvider.dispose();
      if (groupSymbolTypeItemProvider != null) groupSymbolTypeItemProvider.dispose();
      if (intermediateEventSymbolItemProvider != null) intermediateEventSymbolItemProvider.dispose();
      if (laneSymbolItemProvider != null) laneSymbolItemProvider.dispose();
      if (linkTypeTypeItemProvider != null) linkTypeTypeItemProvider.dispose();
      if (modelerSymbolTypeItemProvider != null) modelerSymbolTypeItemProvider.dispose();
      if (modelerTypeItemProvider != null) modelerTypeItemProvider.dispose();
      if (modelTypeItemProvider != null) modelTypeItemProvider.dispose();
      if (organizationSymbolTypeItemProvider != null) organizationSymbolTypeItemProvider.dispose();
      if (organizationTypeItemProvider != null) organizationTypeItemProvider.dispose();
      if (parameterMappingTypeItemProvider != null) parameterMappingTypeItemProvider.dispose();
      if (participantTypeItemProvider != null) participantTypeItemProvider.dispose();
      if (partOfConnectionTypeItemProvider != null) partOfConnectionTypeItemProvider.dispose();
      if (performsConnectionTypeItemProvider != null) performsConnectionTypeItemProvider.dispose();
      if (poolSymbolItemProvider != null) poolSymbolItemProvider.dispose();
      if (processDefinitionTypeItemProvider != null) processDefinitionTypeItemProvider.dispose();
      if (processSymbolTypeItemProvider != null) processSymbolTypeItemProvider.dispose();
      if (publicInterfaceSymbolItemProvider != null) publicInterfaceSymbolItemProvider.dispose();
      if (refersToConnectionTypeItemProvider != null) refersToConnectionTypeItemProvider.dispose();
      if (roleSymbolTypeItemProvider != null) roleSymbolTypeItemProvider.dispose();
      if (roleTypeItemProvider != null) roleTypeItemProvider.dispose();
      if (startEventSymbolItemProvider != null) startEventSymbolItemProvider.dispose();
      if (subProcessOfConnectionTypeItemProvider != null) subProcessOfConnectionTypeItemProvider.dispose();
      if (teamLeadConnectionTypeItemProvider != null) teamLeadConnectionTypeItemProvider.dispose();
      if (textSymbolTypeItemProvider != null) textSymbolTypeItemProvider.dispose();
      if (textTypeItemProvider != null) textTypeItemProvider.dispose();
      if (transitionConnectionTypeItemProvider != null) transitionConnectionTypeItemProvider.dispose();
      if (transitionTypeItemProvider != null) transitionTypeItemProvider.dispose();
      if (triggersConnectionTypeItemProvider != null) triggersConnectionTypeItemProvider.dispose();
      if (triggerTypeItemProvider != null) triggerTypeItemProvider.dispose();
      if (triggerTypeTypeItemProvider != null) triggerTypeTypeItemProvider.dispose();
      if (unbindActionTypeItemProvider != null) unbindActionTypeItemProvider.dispose();
      if (viewableTypeItemProvider != null) viewableTypeItemProvider.dispose();
      if (viewTypeItemProvider != null) viewTypeItemProvider.dispose();
      if (worksForConnectionTypeItemProvider != null) worksForConnectionTypeItemProvider.dispose();
      if (xmlTextNodeItemProvider != null) xmlTextNodeItemProvider.dispose();
   }

}
